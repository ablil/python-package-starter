name: CI

on:
  pull_request:
  push:
    branches:
      - main

permissions: write-all

jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      release: ${{ steps.release.outputs.release }}
    steps:
      - uses: actions/checkout@v4

      - name: setup python
        uses: actions/setup-python@v5.4.0

      - name: Install dependencies
        run: pipx install poetry && poetry install

      - name: bump version
        id: release
        run: |
          if [[ ${{ github.ref }} == 'refs/heads/main' ]]; then
            poetry version patch
          else
            VERSION=$(poetry version -s | cut -d. -f1,2) 
            poetry version "${VERSION}.dev$(date +%s)"
          fi

          echo release=$(poetry version -s) >> $GITHUB_OUTPUT

      - name: Build and test
        run: poetry build && poetry run python -m unittest

      - name: Publish release to test PyPI
        if: github.ref != 'refs/heads/main'
        run: |
          poetry config repositories.test-pypi https://test.pypi.org/legacy/
          poetry config pypi-token.test-pypi ${{ secrets.TEST_PYPI_TOKEN }}
          poetry publish -r test-pypi

      - name: Publish release to PyPi
        if: github.ref == 'refs/heads/main'
        run: poetry config pypi-token.pypi ${{ secrets.PYPI_TOKEN }} &&  poetry publish

      - name: Create Github release
        if: github.ref == 'refs/heads/main'
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          git tag "$(poetry version -s)" && git push --tags
          gh release create "$(poetry version -s)" --generate-notes
